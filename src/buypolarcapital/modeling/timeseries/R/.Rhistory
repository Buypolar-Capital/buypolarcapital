# Extract posterior draws
bsts_draws <- bsts_samples$distribution
# Compute desired stats
df_bsts <- tibble(
Date = index(data) %>% max() %>% yearmonth() %>% seq(., by = 1, length.out = h),
Mean = apply(bsts_draws, 1, mean),
Lower = apply(bsts_draws, 1, quantile, probs = 0.1),
Upper = apply(bsts_draws, 1, quantile, probs = 0.9)
)
# Load core packages
library(tidyverse)
library(fpp3)              # includes tsibble, fable, feasts
library(fable.prophet)     # Prophet model
library(forecast)          # TBATS, nnetar
library(bsts)              # Bayesian Structural Time Series
library(gridExtra)
library(patchwork)
# Avoid dplyr::lag() issues with xts
conflictRules("dplyr", exclude = "lag")
# Create output folder if it doesn't exist
if (!dir.exists("plots")) dir.create("plots")
# Load and prep data
data <- aus_airpassengers %>%
mutate(Month = yearmonth(Year)) %>%
as_tsibble(index = Month)
# Forecast horizon
h <- 12
# -------------------
# MODELS IN FABLE
# -------------------
models_fable <- model(
data,
Mean       = MEAN(Passengers),
Naive      = NAIVE(Passengers),
SNaive     = SNAIVE(Passengers ~ lag("year")),
Drift      = RW(Passengers ~ drift()),
ARIMA      = ARIMA(Passengers),
ETS        = ETS(Passengers),
TSLM       = TSLM(Passengers ~ trend() + season()),
Prophet    = prophet(Passengers ~ season(period = "year"))
)
fc_fable <- forecast(models_fable, h = h)
# -------------------
# NNETAR + TBATS (from forecast pkg)
# -------------------
data_ts <- ts(data$Passengers, start = c(2000, 1), frequency = 12)
fit_tbats <- tbats(data_ts)
fc_tbats <- forecast::forecast(fit_tbats, h = h)
fit_nnetar <- nnetar(data_ts)
fc_nnetar <- forecast::forecast(fit_nnetar, h = h)
# -------------------
# BSTS (Bayesian Structural Time Series)
# -------------------
ss <- AddLocalLinearTrend(list(), data_ts)
model_bsts <- bsts(data_ts, state.specification = ss, niter = 1000)
pred_bsts <- predict(model_bsts, horizon = h, quantiles = c(0.1, 0.9))
# -------------------
# PLOTS
# -------------------
# Fable-based models (ggplot-style)
plots_fable <- fc_fable %>%
autoplot(data) +
labs(title = "Forecasts from fable models") +
facet_wrap(~.model, scales = "free_y") +
theme_minimal()
# TBATS plot
plot_tbats <- autoplot(fc_tbats) +
labs(title = "TBATS Forecast") +
theme_minimal()
# NNETAR plot
plot_nnetar <- autoplot(fc_nnetar) +
labs(title = "NNETAR Forecast") +
theme_minimal()
# BSTS plot
bsts_samples <- predict(model_bsts, horizon = h, burn = 100, quantiles = NULL)
# Extract posterior draws
bsts_draws <- bsts_samples$distribution
# Compute desired stats
df_bsts <- tibble(
Date  = index(data) %>% max() %>% yearmonth() %>% seq(., by = 1, length.out = h),
Mean  = apply(bsts_draws, 2, mean),
Lower = apply(bsts_draws, 2, quantile, probs = 0.1),
Upper = apply(bsts_draws, 2, quantile, probs = 0.9)
)
plot_bsts <- data %>%
ggplot(aes(x = Month, y = Passengers)) +
geom_line() +
geom_line(data = df_bsts, aes(x = Date, y = Mean), color = "blue") +
geom_ribbon(data = df_bsts, aes(x = Date, ymin = Lower, ymax = Upper), alpha = 0.3) +
labs(title = "BSTS Forecast") +
theme_minimal()
# -------------------
# SAVE TO MULTI-PAGE PDF
# -------------------
pdf("plots/airport_forecasts_full.pdf", width = 12, height = 8)
print(plots_fable)
# Load core packages
library(tidyverse)
library(fpp3)              # includes tsibble, fable, feasts
library(fable.prophet)     # Prophet model
library(forecast)          # TBATS, nnetar
library(bsts)              # Bayesian Structural Time Series
library(gridExtra)
library(patchwork)
# Avoid dplyr::lag() issues with xts
conflictRules("dplyr", exclude = "lag")
# Create output folder if it doesn't exist
if (!dir.exists("plots")) dir.create("plots")
# Load and prep data
data <- aus_airpassengers %>%
mutate(Month = yearmonth(Year)) %>%
as_tsibble(index = Month)
# Forecast horizon
h <- 12
# -------------------
# MODELS IN FABLE
# -------------------
models_fable <- model(
data,
Mean       = MEAN(Passengers),
Naive      = NAIVE(Passengers),
SNaive     = SNAIVE(Passengers ~ lag("year")),
Drift      = RW(Passengers ~ drift()),
ARIMA      = ARIMA(Passengers),
ETS        = ETS(Passengers),
TSLM       = TSLM(Passengers ~ trend() + season()),
Prophet    = prophet(Passengers ~ season(period = "year"))
)
fc_fable <- forecast(models_fable, h = h)
# -------------------
# NNETAR + TBATS (from forecast pkg)
# -------------------
data_ts <- ts(data$Passengers, start = c(2000, 1), frequency = 12)
fit_tbats <- tbats(data_ts)
fc_tbats <- forecast::forecast(fit_tbats, h = h)
fit_nnetar <- nnetar(data_ts)
fc_nnetar <- forecast::forecast(fit_nnetar, h = h)
# -------------------
# BSTS (Bayesian Structural Time Series)
# -------------------
ss <- AddLocalLinearTrend(list(), data_ts)
model_bsts <- bsts(data_ts, state.specification = ss, niter = 1000)
pred_bsts <- predict(model_bsts, horizon = h, quantiles = c(0.1, 0.9))
# -------------------
# PLOTS
# -------------------
models_fable <- models_fable %>%
select(where(~ !is.null(.)))
# Fable-based models (ggplot-style)
plots_fable <- fc_fable %>%
filter(!is.na(.mean)) %>%
autoplot(data) +
labs(title = "Forecasts from fable models") +
facet_wrap(~.model, scales = "free_y") +
theme_minimal()
# TBATS plot
plot_tbats <- autoplot(fc_tbats) +
labs(title = "TBATS Forecast") +
theme_minimal()
# NNETAR plot
plot_nnetar <- autoplot(fc_nnetar) +
labs(title = "NNETAR Forecast") +
theme_minimal()
# BSTS plot
bsts_samples <- predict(model_bsts, horizon = h, burn = 100, quantiles = NULL)
# Extract posterior draws
bsts_draws <- bsts_samples$distribution
# Compute desired stats
df_bsts <- tibble(
Date  = index(data) %>% max() %>% yearmonth() %>% seq(., by = 1, length.out = h),
Mean  = apply(bsts_draws, 2, mean),
Lower = apply(bsts_draws, 2, quantile, probs = 0.1),
Upper = apply(bsts_draws, 2, quantile, probs = 0.9)
)
plot_bsts <- data %>%
ggplot(aes(x = Month, y = Passengers)) +
geom_line() +
geom_line(data = df_bsts, aes(x = Date, y = Mean), color = "blue") +
geom_ribbon(data = df_bsts, aes(x = Date, ymin = Lower, ymax = Upper), alpha = 0.3) +
labs(title = "BSTS Forecast") +
theme_minimal()
# -------------------
# SAVE TO MULTI-PAGE PDF
# -------------------
pdf("plots/airport_forecasts_full.pdf", width = 12, height = 8)
print(plots_fable)
# Load core packages
library(tidyverse)
library(fpp3)              # includes tsibble, fable, feasts
library(fable.prophet)     # Prophet model
library(forecast)          # TBATS, nnetar
library(bsts)              # Bayesian Structural Time Series
library(gridExtra)
library(patchwork)
# Avoid dplyr::lag() issues with xts
conflictRules("dplyr", exclude = "lag")
# Create output folder if it doesn't exist
if (!dir.exists("plots")) dir.create("plots")
# Load and prep data
data <- aus_airpassengers %>%
mutate(Month = yearmonth(Year)) %>%
as_tsibble(index = Month)
# Forecast horizon
h <- 12
# -------------------
# MODELS IN FABLE
# -------------------
models_fable <- model(
data,
Mean       = MEAN(Passengers),
Naive      = NAIVE(Passengers),
SNaive     = SNAIVE(Passengers ~ lag("year")),
Drift      = RW(Passengers ~ drift()),
ARIMA      = ARIMA(Passengers),
ETS        = ETS(Passengers),
TSLM       = TSLM(Passengers ~ trend() + season()),
Prophet    = prophet(Passengers ~ season(period = "year"))
)
fc_fable <- forecast(models_fable, h = h)
# -------------------
# NNETAR + TBATS (from forecast pkg)
# -------------------
data_ts <- ts(data$Passengers, start = c(2000, 1), frequency = 12)
fit_tbats <- tbats(data_ts)
fc_tbats <- forecast::forecast(fit_tbats, h = h)
fit_nnetar <- nnetar(data_ts)
fc_nnetar <- forecast::forecast(fit_nnetar, h = h)
# -------------------
# BSTS (Bayesian Structural Time Series)
# -------------------
ss <- AddLocalLinearTrend(list(), data_ts)
model_bsts <- bsts(data_ts, state.specification = ss, niter = 1000)
pred_bsts <- predict(model_bsts, horizon = h, quantiles = c(0.1, 0.9))
# -------------------
# PLOTS
# -------------------
models_fable <- models_fable %>%
select(where(~ !is.null(.)))
# Fable-based models (ggplot-style)
plots_fable <- fc_fable %>%
filter(!is.na(.mean)) %>%
autoplot(data) +
labs(title = "Forecasts from fable models") +
facet_wrap(~.model, scales = "free_y") +
theme_minimal()
# TBATS plot
plot_tbats <- autoplot(fc_tbats) +
labs(title = "TBATS Forecast") +
theme_minimal()
# NNETAR plot
plot_nnetar <- autoplot(fc_nnetar) +
labs(title = "NNETAR Forecast") +
theme_minimal()
# BSTS plot
bsts_samples <- predict(model_bsts, horizon = h, burn = 100, quantiles = NULL)
# Extract posterior draws
bsts_draws <- bsts_samples$distribution
# Compute desired stats
df_bsts <- tibble(
Date  = index(data) %>% max() %>% yearmonth() %>% seq(., by = 1, length.out = h),
Mean  = apply(bsts_draws, 2, mean),
Lower = apply(bsts_draws, 2, quantile, probs = 0.1),
Upper = apply(bsts_draws, 2, quantile, probs = 0.9)
)
plot_bsts <- data %>%
ggplot(aes(x = Month, y = Passengers)) +
geom_line() +
geom_line(data = df_bsts, aes(x = Date, y = Mean), color = "blue") +
geom_ribbon(data = df_bsts, aes(x = Date, ymin = Lower, ymax = Upper), alpha = 0.3) +
labs(title = "BSTS Forecast") +
theme_minimal()
# -------------------
# SAVE TO MULTI-PAGE PDF
# -------------------
pdf("plots/airport_forecasts_full.pdf", width = 12, height = 8)
print(plots_fable)
# Load core packages
library(tidyverse)
library(fpp3)              # includes tsibble, fable, feasts
library(fable.prophet)     # Prophet model
library(forecast)          # TBATS, nnetar
library(bsts)              # Bayesian Structural Time Series
library(gridExtra)
library(patchwork)
# Avoid dplyr::lag() issues with xts
conflictRules("dplyr", exclude = "lag")
# Create output folder if it doesn't exist
if (!dir.exists("plots")) dir.create("plots")
# Load and prep data
data <- aus_airpassengers %>%
mutate(Month = yearmonth(Year)) %>%
as_tsibble(index = Month)
# Forecast horizon
h <- 12
# -------------------
# MODELS IN FABLE
# -------------------
models_fable <- model(
data,
Mean   = MEAN(Passengers),
Naive  = NAIVE(Passengers),
Drift  = RW(Passengers ~ drift()),
ARIMA  = ARIMA(Passengers),
ETS    = ETS(Passengers)
# Excluding: SNaive, TSLM, Prophet (need more structure)
)
fc_fable <- forecast(models_fable, h = h)
# Generate one plot per model (since facet_wrap caused issues)
plots_fable_list <- fc_fable %>%
filter(!is.na(.mean)) %>%
group_split(.model) %>%
map(~ autoplot(.x, data) +
labs(title = paste("Forecast:", unique(.x$.model))) +
theme_minimal())
# -------------------
# NNETAR + TBATS (from forecast pkg)
# -------------------
data_ts <- ts(data$Passengers, start = c(2000, 1), frequency = 12)
fit_tbats <- tbats(data_ts)
fc_tbats <- forecast::forecast(fit_tbats, h = h)
fit_nnetar <- nnetar(data_ts)
fc_nnetar <- forecast::forecast(fit_nnetar, h = h)
# -------------------
# BSTS (Bayesian Structural Time Series)
# -------------------
ss <- AddLocalLinearTrend(list(), data_ts)
model_bsts <- bsts(data_ts, state.specification = ss, niter = 1000)
bsts_samples <- predict(model_bsts, horizon = h, burn = 100, quantiles = NULL)
# Extract posterior draws
bsts_draws <- bsts_samples$distribution
# Compute desired stats
df_bsts <- tibble(
Date  = index(data) %>% max() %>% yearmonth() %>% seq(., by = 1, length.out = h),
Mean  = apply(bsts_draws, 2, mean),
Lower = apply(bsts_draws, 2, quantile, probs = 0.1),
Upper = apply(bsts_draws, 2, quantile, probs = 0.9)
)
plot_bsts <- data %>%
ggplot(aes(x = Month, y = Passengers)) +
geom_line() +
geom_line(data = df_bsts, aes(x = Date, y = Mean), color = "blue") +
geom_ribbon(data = df_bsts, aes(x = Date, ymin = Lower, ymax = Upper), alpha = 0.3) +
labs(title = "BSTS Forecast") +
theme_minimal()
# -------------------
# SAVE TO MULTI-PAGE PDF
# -------------------
pdf("plots/airport_forecasts_full.pdf", width = 12, height = 8)
# Print one plot per page
walk(plots_fable_list, print)
# Load core packages
library(tidyverse)
library(fpp3)              # includes tsibble, fable, feasts
library(fable.prophet)     # Prophet model
library(forecast)          # TBATS, nnetar
library(bsts)              # Bayesian Structural Time Series
library(gridExtra)
library(patchwork)
# Avoid dplyr::lag() issues with xts
conflictRules("dplyr", exclude = "lag")
# Create output folder if it doesn't exist
if (!dir.exists("plots")) dir.create("plots")
# Load and prep data
data <- aus_airpassengers %>%
mutate(Month = yearmonth(Year)) %>%
as_tsibble(index = Month)
# Forecast horizon
h <- 12
# -------------------
# MODELS IN FABLE
# -------------------
models_fable <- model(
data,
Mean   = MEAN(Passengers),
Naive  = NAIVE(Passengers),
Drift  = RW(Passengers ~ drift()),
ARIMA  = ARIMA(Passengers),
ETS    = ETS(Passengers)
)
fc_fable <- forecast(models_fable, h = h)
# Robust plot generation: try-catch on each plot
plots_fable_list <- fc_fable %>%
filter(!is.na(.mean)) %>%
group_split(.model) %>%
map(~ tryCatch(
autoplot(.x, data) +
labs(title = paste("Forecast:", unique(.x$.model))) +
theme_minimal(),
error = function(e) NULL  # Skip failed plots
)) %>%
compact()  # Remove NULLs from failed attempts
# -------------------
# NNETAR + TBATS
# -------------------
data_ts <- ts(data$Passengers, start = c(2000, 1), frequency = 12)
fit_tbats <- tbats(data_ts)
fc_tbats <- forecast::forecast(fit_tbats, h = h)
fit_nnetar <- nnetar(data_ts)
fc_nnetar <- forecast::forecast(fit_nnetar, h = h)
# -------------------
# BSTS
# -------------------
ss <- AddLocalLinearTrend(list(), data_ts)
model_bsts <- bsts(data_ts, state.specification = ss, niter = 1000)
bsts_samples <- predict(model_bsts, horizon = h, burn = 100, quantiles = NULL)
bsts_draws <- bsts_samples$distribution
# Build BSTS forecast DataFrame
df_bsts <- tibble(
Date  = index(data) %>% max() %>% yearmonth() %>% seq(., by = 1, length.out = h),
Mean  = apply(bsts_draws, 2, mean),
Lower = apply(bsts_draws, 2, quantile, probs = 0.1),
Upper = apply(bsts_draws, 2, quantile, probs = 0.9)
)
plot_bsts <- data %>%
ggplot(aes(x = Month, y = Passengers)) +
geom_line() +
geom_line(data = df_bsts, aes(x = Date, y = Mean), color = "blue") +
geom_ribbon(data = df_bsts, aes(x = Date, ymin = Lower, ymax = Upper), alpha = 0.3) +
labs(title = "BSTS Forecast") +
theme_minimal()
# -------------------
# SAVE TO MULTI-PAGE PDF
# -------------------
pdf("plots/airport_forecasts_full.pdf", width = 12, height = 8)
walk(plots_fable_list, print)
# Load core packages
library(tidyverse)
library(fpp3)              # includes tsibble, fable, feasts
library(fable.prophet)     # Prophet model
library(forecast)          # TBATS, nnetar
library(bsts)              # Bayesian Structural Time Series
library(gridExtra)
library(patchwork)
# Avoid dplyr::lag() issues with xts
conflictRules("dplyr", exclude = "lag")
# Create output folder if it doesn't exist
if (!dir.exists("plots")) dir.create("plots")
# Load and prep data
data <- aus_airpassengers %>%
mutate(Month = yearmonth(Year)) %>%
as_tsibble(index = Month)
# Forecast horizon
h <- 12
# -------------------
# MODELS IN FABLE
# -------------------
models_fable <- model(
data,
Mean   = MEAN(Passengers),
Naive  = NAIVE(Passengers),
Drift  = RW(Passengers ~ drift()),
ARIMA  = ARIMA(Passengers),
ETS    = ETS(Passengers)
)
fc_fable <- forecast(models_fable, h = h)
# Robust plot generation: try-catch on each plot
plots_fable_list <- fc_fable %>%
filter(!is.na(.mean)) %>%
group_split(.model) %>%
map(~ tryCatch({
p <- autoplot(.x, data) +
labs(title = paste("Forecast:", unique(.x$.model))) +
theme_minimal() +
guides(colour = "none")  # Remove legend to avoid guide issues
p
}, error = function(e) {
message("Skipping plot for ", unique(.x$.model), " due to error: ", e$message)
NULL  # Skip failed plots
})) %>%
compact()  # Remove NULLs from failed attempts
# -------------------
# NNETAR + TBATS
# -------------------
data_ts <- ts(data$Passengers, start = c(2000, 1), frequency = 12)
fit_tbats <- tbats(data_ts)
fc_tbats <- forecast::forecast(fit_tbats, h = h)
fit_nnetar <- nnetar(data_ts)
fc_nnetar <- forecast::forecast(fit_nnetar, h = h)
# Convert forecast objects to ggplot for consistency
plot_tbats <- autoplot(fc_tbats) +
labs(title = "TBATS Forecast") +
theme_minimal()
plot_nnetar <- autoplot(fc_nnetar) +
labs(title = "NNETAR Forecast") +
theme_minimal()
# -------------------
# BSTS
# -------------------
ss <- AddLocalLinearTrend(list(), data_ts)
model_bsts <- bsts(data_ts, state.specification = ss, niter = 1000)
bsts_samples <- predict(model_bsts, horizon = h, burn = 100, quantiles = NULL)
bsts_draws <- bsts_samples$distribution
# Build BSTS forecast DataFrame
df_bsts <- tibble(
Date  = index(data) %>% max() %>% yearmonth() %>% seq(., by = 1, length.out = h),
Mean  = apply(bsts_draws, 2, mean),
Lower = apply(bsts_draws, 2, quantile, probs = 0.1),
Upper = apply(bsts_draws, 2, quantile, probs = 0.9)
)
plot_bsts <- data %>%
ggplot(aes(x = Month, y = Passengers)) +
geom_line() +
geom_line(data = df_bsts, aes(x = Date, y = Mean), color = "blue") +
geom_ribbon(data = df_bsts, aes(x = Date, ymin = Lower, ymax = Upper), alpha = 0.3) +
labs(title = "BSTS Forecast") +
theme_minimal()
# -------------------
# SAVE TO MULTI-PAGE PDF
# -------------------
pdf("plots/airport_forecasts_full.pdf", width = 12, height = 8)
# Print fable plots
walk(plots_fable_list, print)
