#   gg_season(Demand, period = "day") +
#   theme(legend.position = "none") +
#   labs(y = "MWh", title = "Electricity demand: Victoria")
vic_elec %>%
gg_season(Demand, period = "year")
aus_production %>%
gg_subseries(Beer)
aus_accommodation %>%
filter(State == "Australian Capital Territory") %>%
gg_subseries(Occupancy)
holidays <- tourism %>%
filter(Purpose == "Holiday") %>%
group_by(State) %>%
summarise(Trips = sum(Trips))
autoplot(holidays, Trips)
vic_elec %>%
filter(year(Time) == 2014) %>%
autoplot(Demand)
vic_elec %>%
filter(year(Time) == 2014) %>%
autoplot(Temperature)
vic_elec %>%
filter(year(Time) == 2014) %>%
ggplot(aes(x = Temperature, y = Demand)) +
geom_point()
visitors <- tourism %>%
group_by(State) %>%
summarise(Trips = sum(Trips))
visitors %>%
ggplot(aes(x = Quarter, y = Trips)) +
geom_line() +
facet_grid(vars(State), scales = "free_y")
visitors %>%
pivot_wider(values_from = Trips,
names_from = State) %>%
GGally::ggpairs(columns = 2:9)
dev.off()
library(fpp3)
library(tidyverse)
if (!dir.exists("plots")) dir.create("plots")
pdf("lagin/all_plots.pdf", onefile = TRUE, width = 10, height = 6)
setwd("C:/Users/ofurn/Dokumenter/Github/buypolarcapital/src/buypolarcapital/modeling/timeseries/R")
library(fpp3)
library(tidyverse)
if (!dir.exists("plots")) dir.create("plots")
pdf("plots/lagin_plots.pdf", onefile = TRUE, width = 10, height = 6)
recent <- aus_production %>%
filter(year(Quarter) >= 2000)
recent %>%
gg_lag(Beer, geom = "point")
recent %>%
ACF(Beer, lag_max = 9) %>%
autoplot()
aus_production %>%
ACF(Tobacco, lag_max = 48) %>%
autoplot()
dev.off()
library(fpp3)
library(tidyverse)
library(tidyquant)
library(slider)
library(seasonal)
if (!dir.exists("plots")) dir.create("plots")
pdf("plots/decomp_plots.pdf", onefile = TRUE, width = 10, height = 6)
global_economy %>%
filter(Country == "Australia") %>%
autoplot(GDP/Population)
lambda <- aus_production %>%
features(Gas, features = guerrero) %>%
pull(lambda_guerrero)
aus_production %>% autoplot(box_cox(Gas, lambda = lambda))
us_employment %>%
filter(year(Month) >= 1990, Title == "Retail Trade") %>%
select(-Series_ID) %>%
autoplot(Employed)
us_employment %>%
filter(year(Month) >= 1990, Title == "Retail Trade") %>%
model(stl = STL(Employed)) %>%
components() %>%
autoplot() +
theme_minimal()
us_employment %>%
filter(year(Month) >= 1990, Title == "Retail Trade") %>%
model(stl = STL(Employed)) %>%
components() %>%
as_tsibble() %>%
autoplot() +
geom_line(aes(y = trend), col = "red")
us_employment %>%
filter(year(Month) >= 1990, Title == "Retail Trade") %>%
model(stl = STL(Employed)) %>%
components() %>%
as_tsibble() %>%
autoplot(Employed, col = "grey", alpha = .5) +
geom_line(aes(y = season_adjust), col = "blue") +
theme_classic()
global_economy %>%
filter(Country == "Australia") %>%
autoplot(Exports)
global_economy %>%
filter(Country == "Australia") %>%
mutate(
MA3 = slide_dbl(Exports, mean, .before = 1, .after = 1, .complete = TRUE),
MA5 = slide_dbl(Exports, mean, .before = 2, .after = 2, .complete = TRUE),
MA7 = slide_dbl(Exports, mean, .before = 3, .after = 3, .complete = TRUE),
MA9 = slide_dbl(Exports, mean, .before = 4, .after = 4, .complete = TRUE)
) %>%
pivot_longer(cols = starts_with("MA"), names_to = "MA", values_to = "MA_value") %>%
ggplot(aes(x = Year)) +
geom_line(aes(y = Exports), color = "black") +
geom_line(aes(y = MA_value, color = MA)) +
facet_wrap(~ MA) +
theme_bw() +
labs(title = "Exports with Moving Averages", y = "Exports")
us_retail <-
us_employment %>%
filter(year(Month) >= 1990, Title == "Retail Trade") %>%
select(-Series_ID)
us_retail %>%
model(classical_decomposition(Employed, type = "additive")) %>%
components() %>%
autoplot()
x11_dcmp <-
us_retail %>%
model(x11 = X_13ARIMA_SEATS(Employed ~ x11())) %>%
components()
x11_dcmp %>%
autoplot()
x11_dcmp %>%
ggplot(aes(x = Month)) +
geom_line(aes(y = Employed, col = "Data")) +
geom_line(aes(y = season_adjust, col = "Seasonally Adjusted")) +
geom_line(aes(y = trend, col = "Trend")) +
scale_colour_manual(
values = c("gray", "blue", "green"),
breaks = c("Data", "Seasonally Adjusted", "Trend")
)
x11_dcmp %>%
gg_subseries(seasonal)
seats_dcmp <- us_retail %>%
model(seats = X_13ARIMA_SEATS(Employed ~ seats())) %>%
components()
seats_dcmp %>%
autoplot()
seats_dcmp %>%
gg_subseries(seasonal)
library(fpp3)
library(tidyverse)
if (!dir.exists("plots")) dir.create("plots")
pdf("plots/feasting_plots.pdf", onefile = TRUE, width = 10, height = 6)
tourism %>%
features(Trips, list(mean = mean)) %>%
arrange(mean)
tourism %>%
features(Trips, quantile)
tourism %>%
features(Trips, feat_acf)
tourism %>%
features(Trips, feat_stl) %>%
ggplot(aes(x = trend_strength,
y = seasonal_strength_year,
col = Purpose)) +
geom_point() +
facet_wrap(vars(State))
tourism %>%
features(Trips, feat_stl) %>%
filter(seasonal_strength_year == max(seasonal_strength_year)) %>%
left_join(tourism, by = c("State", "Region", "Purpose"),
multiple = "all") %>%
ggplot(aes(x = Quarter, y = Trips)) +
geom_line() +
facet_grid(vars(State, Region, Purpose))
tourism %>%
features(Trips, feature_set(pkgs = "feasts")) %>%
select_at(vars(contains("season"), Purpose)) %>%
mutate(
seasonal_peak_year = seasonal_peak_year +
4*(seasonal_peak_year==0),
seasonal_trough_year = seasonal_trough_year +
4*(seasonal_trough_year==0),
seasonal_peak_year = glue("Q{seasonal_peak_year}"),
seasonal_trough_year = glue("Q{seasonal_trough_year}"),
) %>%
GGally::ggpairs(mapping = aes(colour = Purpose))
cls
library(fpp3)
library(tidyverse)
library(glue)
if (!dir.exists("plots")) dir.create("plots")
pdf("plots/glue_plots.pdf", onefile = TRUE, width = 10, height = 6)
tourism %>%
features(Trips, feature_set(pkgs = "feasts")) %>%
select_at(vars(contains("season"), Purpose)) %>%
mutate(
seasonal_peak_year = seasonal_peak_year +
4*(seasonal_peak_year==0),
seasonal_trough_year = seasonal_trough_year +
4*(seasonal_trough_year==0),
seasonal_peak_year = glue("Q{seasonal_peak_year}"),
seasonal_trough_year = glue("Q{seasonal_trough_year}"),
) %>%
GGally::ggpairs(mapping = aes(colour = Purpose))
dev.off()
library(tools)
n=tools::file_path_sans_ext(basename(rstudioapi::getSourceEditorContext()$path))
dir.create("plots",F)
pdf(sprintf("plots/%s.pdf",n),T,10,6)
dir.create("plots",F)
n=tools::file_path_sans_ext(basename(rstudioapi::getSourceEditorContext()$path))
dir.create("plots",F)
pdf(sprintf("plots/%s.pdf",n),T,10,6)
n=tools::file_path_sans_ext(basename(rstudioapi::getSourceEditorContext()$path))
dir.create("plots",F)
pdf(sprintf("plots/%s.pdf",n),onefile=T,w=10,h=6)
dev.off()
gdppc <- global_economy %>%
mutate(GDP_per_capita = GDP/Population)
gdppc %>%
filter(Country == "Sweden") %>%
autoplot(GDP_per_capita)
gdppc %>%
filter(Country == "Sweden") %>%
autoplot(GDP_per_capita)
fit <- gdppc %>%
model(trend_model = TSLM(GDP_per_capita ~ trend()))
fish_encounters
fit
fit %>%
forecast(h = "3 years")
fit %>%
filter(Country == "Sweden") %>%
forecast(h = "3 years") %>%
autoplot(gdppc)
fit %>%
forecast(h = "3 years") %>%
filter(Country == "Sweden") %>%
autoplot(gdppc)
gdppc <- global_economy %>%
mutate(GDP_per_capita = GDP/Population) %>%
filter(Country == "Sweden")
fit %>%
forecast(h = "3 years") %>%
filter(Country == "Sweden") %>%
autoplot(gdppc)
library(fpp3)
library(tidyverse)
# Prepare data
gdppc <- global_economy %>%
mutate(GDP_per_capita = GDP / Population)
# Plot historical data for Sweden
gdppc %>%
filter(Country == "Sweden") %>%
autoplot(GDP_per_capita)
# Model fitting
fit <- gdppc %>%
model(trend_model = TSLM(GDP_per_capita ~ trend()))
# Forecast and correct plotting
fit %>%
forecast(h = "3 years") %>%
filter(Country == "Sweden") %>%
autoplot(
gdppc %>% filter(Country == "Sweden")
) +
labs(
y = "$US",
title = "GDP per capita for Sweden (with Forecast)"
)
gddpc <- global_economy %>%
mutate(GDP_per_capita = GDP/Population)
fit <- gdppc %>%
model(trend_model = TSLM(GDP_per_capita ~ trend()))
fit %>%
forecast(h = "3 years") %>%
filter(Country == "Sweden",
.model == "trend_model") %>%
autoplot(gdppc %>% filter(Country == "Sweden"))
library(fpp3)
library(tidyverse)
# Get script name for PDF output
n=tools::file_path_sans_ext(basename(rstudioapi::getSourceEditorContext()$path))
dir.create("plots",F)
pdf(sprintf("plots/%s.pdf",n),onefile=T,w=10,h=6)
# Calculate GDP per capita and filter for Sweden, removing NAs
gdppc <- global_economy %>%
mutate(GDP_per_capita = GDP/Population) %>%
filter(Country == "Sweden", !is.na(GDP_per_capita))
# Plot GDP per capita
gdppc %>% autoplot(GDP_per_capita)
# Fit trend model
fit <- gdppc %>% model(trend_model = TSLM(GDP_per_capita ~ trend()))
# Forecast and plot
fit %>% forecast(h = "3 years") %>% autoplot(gdppc)
library(fpp3)
library(tidyverse)
# PDF setup
n=tools::file_path_sans_ext(basename(rstudioapi::getSourceEditorContext()$path))
dir.create("plots",F)
pdf(sprintf("plots/%s.pdf",n),onefile=T,w=10,h=6)
# Calculate GDP per capita and filter for Sweden
gdppc <- global_economy %>%
mutate(GDP_per_capita = GDP/Population) %>%
filter(Country == "Sweden", !is.na(GDP_per_capita))
# Check data
if (nrow(gdppc) < 2) stop("Not enough data for Sweden. Need at least 2 non-NA rows.")
print(summary(gdppc$GDP_per_capita))
# Plot GDP per capita
gdppc %>% autoplot(GDP_per_capita)
# Fit trend model
fit <- gdppc %>% model(trend_model = TSLM(GDP_per_capita ~ trend()))
# Check if model fitted successfully
if (all(is.na(fit$trend_model))) stop("Model fitting failed. Check data for issues.")
# Forecast and plot
fc <- fit %>% forecast(h = "3 years")
if (nrow(fc) == 0) stop("Forecast produced no output. Check model fit.")
fc %>% autoplot(gdppc)
library(fpp3)
bricks <- aus_production %>%
filter_index("1970 Q1" ~ "2004 Q4") %>%
select(Bricks)
bricks
brick %>% model(MEAN(Bricks))
bricks <- aus_production %>%
filter_index("1970 Q1" ~ "2004 Q4") %>%
select(Bricks)
bricks %>% model(MEAN(Bricks))
bricks %>% model(MEAN(Bricks)) %>% autoplot()
bricks %>% model(MEAN(Bricks))
bricks
bricks %>%
ggplot(aes(x = Quarter, y = Brickss)) +
geom_line()
bricks %>%
ggplot(aes(x = Quarter, y = Bricks)) +
geom_line()
bricks
bricks %>%
ggplot(aes(x = Quarter, y = Bricks))
bricks %>%
ggplot(aes(x = Quarter, y = Bricks)) +
geom_line()
bricks %>%
ggplot(aes(x = Quarter, y = Bricks)) +
geom_line() +
geom_hline(yintercept = 450,
col = "blue",
lty = "dashed")
bricks %>%
ggplot(aes(x = Quarter, y = Bricks)) +
geom_line() +
geom_hline(yintercept = 450,
col = "blue",
lty = "dashed") +
theme_void()
bricks %>%
ggplot(aes(x = Quarter, y = Bricks)) +
geom_line() +
geom_hline(yintercept = 450,
col = "blue",
lty = "dashed") +
theme_minimal()
bricks %>%
model(SNAIVE(Bricks ~ lag("year")))
bricks %>%
model(SNAIVE(Bricks ~ lag("year"))) %>%
components()
bricks %>%
model(SNAIVE(Bricks ~ lag("year")))
bricks %>%
model(SNAIVE(Bricks ~ lag("year"))) %>%
augment()
bricks %>%
model(SNAIVE(Bricks ~ lag("year"))) %>%
augment() %>%
ggplot(aes(x = Quarter, y = Bricks)) +
geom_line(aes(y = .fitted, col = "red", lty = "dashed"))
bricks %>%
model(SNAIVE(Bricks ~ lag("year"))) %>%
augment() %>%
ggplot(aes(x = Quarter, y = Bricks)) +
geom_line(aes(y = .fitted, col = "red", lty = "dashed")) +
theme_minimal()
bricks %>%
model(SNAIVE(Bricks ~ lag("year"))) %>%
augment() %>%
ggplot(aes(x = Quarter, y = Bricks)) +
geom_line(aes(y = .fitted) col = "red", lty = "dashed")) +
bricks %>%
model(SNAIVE(Bricks ~ lag("year"))) %>%
augment() %>%
ggplot(aes(x = Quarter, y = Bricks)) +
geom_line(aes(y = .fitted), col = "red", lty = "dashed")) +
bricks %>%
model(SNAIVE(Bricks ~ lag("year"))) %>%
augment() %>%
ggplot(aes(x = Quarter, y = Bricks)) +
geom_line(aes(y = .fitted), col = "red", lty = "dashed") +
theme_minimal()
Bricks
bricks
bricks %>%
model(SNAIVE(Bricks ~ lag("year"))) %>%
augment() %>%
ggplot(aes(x = Quarter, y = Bricks)) +
geom_line() +
theme_minimal()
bricks %>%
model(SNAIVE(Bricks ~ lag("year"))) %>%
augment() %>%
filter(.model == "snaive_model") %>%
autoplot(Bricks) +
ggplot(aes(x = Quarter, y = Bricks)) +
geom_line() +
theme_minimal()
bricks %>%
model(SNAIVE(Bricks ~ lag("year"))) %>%
augment() %>%
filter(.model == "snaive_model") %>%
autoplot(Bricks) +
theme_minimal()
bricks %>%
model(SNAIVE(Bricks ~ lag("year"))) %>%
augment()
bricks %>%
model(SNAIVE(Bricks ~ lag("year"))) %>%
augment() %>%
autoplot(Bricks) +
theme_minimal()
bricks %>%
model(SNAIVE(Bricks ~ lag("year"))) %>%
augment() %>%
autoplot(Bricks) +
geom_line(aes(x = Quarter, y = .resid))
bricks %>%
model(SNAIVE(Bricks ~ lag("year"))) %>%
augment() %>%
autoplot(Bricks) +
geom_line(aes(x = Quarter, y = .resid)) +
theme_minimal()
bricks %>%
model(SNAIVE(Bricks ~ lag("year"))) %>%
augment() %>%
autoplot(Bricks) +
geom_line(aes(x = Quarter, y = .resid), col = "blue", lty = "dashed") +
theme_minimal()
bricks %>%
model(SNAIVE(Bricks ~ lag("year"))) %>%
augment() %>%
autoplot(Bricks) +
geom_line(aes(x = Quarter, y = .resid), col = "blue", lty = "dashed") +
geom_line(aes(x = Quarter, y = .fitted), col = "red", lty = "dashed") +
theme_minimal()
library(fpp3)
library(tidyverse)
google <- gafa_stock
gafa_stock
google <- gafa_stock %>%
filter(Symbol == "GOOG",
year(Date) >= 2015) %>%
mutate(day = row_number()) %>%
update_tsibble(index = day,
regular = TRUE)
googl
google
google %>%
model(NAIVE(Close)) %>%
gg_tsresiduals()
fc <- prices %>%
filter(!is.na(eggs)) %>%
model(RW(log(eggs) ~ drift())) %>%
forecast(h = 50) %>%
mutate(.median = median(eggs))
prices
fc <- prices %>%
as_tibble() %>%
filter(!is.na(eggs)) %>%
model(RW(log(eggs) ~ drift())) %>%
forecast(h = 50) %>%
mutate(.median = median(eggs))
fc <- prices %>%
as_tibble() %>%
filter(!is.na(eggs)) %>%
model(RW(log(eggs) ~ drift())) %>%
forecast(h = 50) %>%
mutate(.median = median(eggs))
prices
prices %>% colnames()
fpp3::prices
fc <- fpp3::prices %>%
as_tibble() %>%
filter(!is.na(eggs)) %>%
model(RW(log(eggs) ~ drift())) %>%
forecast(h = 50) %>%
mutate(.median = median(eggs))
fc <- fpp3::prices |>
filter(!is.na(eggs)) |>
model(RW(log(eggs) ~ drift())) |>
forecast(h = 50) |>
mutate(.median = median(eggs))
fc
fc %>%
autoplot(prices %>% filter(!is.na(eggs)), level = 80) +
geom_line(aes(y = .median), data = fc, lty = 2, col = "blue")
fc |>
autoplot(prices |> filter(!is.na(eggs)), level = 80) +
geom_line(aes(y = .median), data = fc, linetype = 2, col = "blue") +
labs(title = "Annual egg prices",
y = "$US (in cents adjusted for inflation) ")
fc |>
autoplot(fpp3::prices |> filter(!is.na(eggs)), level = 80) +
geom_line(aes(y = .median), data = fc, linetype = 2, col = "blue") +
labs(title = "Annual egg prices",
y = "$US (in cents adjusted for inflation) ")
