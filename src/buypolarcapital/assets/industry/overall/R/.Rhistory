wage <- read.csv("https://www.uio.no/studier/emner/matnat/math/STK2100/v25/oblig/wage.csv",
header=TRUE)
library(tidyverse)
library(readr)
wage <- read.csv("https://www.uio.no/studier/emner/matnat/math/STK2100/v25/oblig/wage.csv",
header=TRUE)
wage
wage <- read.csv("https://www.uio.no/studier/emner/matnat/math/STK2100/v25/oblig/wage.csv",
header=TRUE)
wage %>% as_tibble()
wage %>% as_tibble()
lapply(wage, unique)
unique
wage %>% st
wage %>% str()
set.seed(1705)
library(caret)
ind <- createDataPartition(wage$wage, p=.7, list = FALSE)
ind <- createDataPartition(wage$wage, p=.7, list = FALSE)
train <- wage[ind, ]
test <- wage[-ind, ]
train
test
set.seed(1705)
wage <- read.csv("https://www.uio.no/studier/emner/matnat/math/STK2100/v25/oblig/wage.csv",
header=TRUE) %>% as_tibble()
ind <- createDataPartition(wage$wage, p=.7, list = FALSE)
train <- wage[ind, ] %>% as_tibble()
test <- wage[-ind, ] %>% as_tibble()
train
test
library(tidyverse)
library(readr)
library(caret)
set.seed(1705)
wage <- read.csv("https://www.uio.no/studier/emner/matnat/math/STK2100/v25/oblig/wage.csv",
header=TRUE)
ind <- createDataPartition(wage$wage, p=.7, list = FALSE)
train <- wage[ind, ] %>% as_tibble()
test <- wage[-ind, ] %>% as_tibble()
lm1 <- lm(wage~., data = wage)
lm1 %>% summary()
library(tidyverse)
library(readr)
library(caret)
set.seed(1705)
wage <- read.csv("https://www.uio.no/studier/emner/matnat/math/STK2100/v25/oblig/wage.csv",
header=TRUE)
ind <- createDataPartition(wage$wage, p=.7, list = FALSE)
train <- wage[ind, ] %>% as_tibble()
test <- wage[-ind, ] %>% as_tibble()
lm1 <- lm(wage~., data = wage)
lm1 %>% summary()
pred1 <- predict(lm1, newdata = test)
install.packages("Metrics")
library(Metrics)
library(tidyverse)
library(readr)
library(caret)
library(Metrics)
set.seed(1705)
wage <- read.csv("https://www.uio.no/studier/emner/matnat/math/STK2100/v25/oblig/wage.csv",
header=TRUE)
ind <- createDataPartition(wage$wage, p=.7, list = FALSE)
train <- wage[ind, ] %>% as_tibble()
test <- wage[-ind, ] %>% as_tibble()
lm1 <- lm(wage~., data = wage)
lm1 %>% summary()
pred1 <- predict(lm1, newdata = test)
mse1 <- mse(pred1)
mse1
lm1 <- lm(wage~., data = wage)
lm1 %>% summary()
pred1 <- predict(lm1, newdata = test)
pred1
mse(actual = test, predicted = pred1)
mse(actual = test, predicted = pred1)
mean((test$wage-pred1)^2)
library(tidyverse)
library(readr)
library(caret)
library(Metrics)
set.seed(1705)
wage <- read.csv("https://www.uio.no/studier/emner/matnat/math/STK2100/v25/oblig/wage.csv",
header=TRUE)
ind <- createDataPartition(wage$wage, p=.7, list = FALSE)
train <- wage[ind, ] %>% as_tibble()
test <- wage[-ind, ] %>% as_tibble()
lm1 <- lm(wage~., data = wage)
lm1 %>% summary()
pred1 <- predict(lm1, newdata = test)
mean((test$wage-pred1)^2)
lm1 %>% summary()
mean((test$wage-pred1)^2)
library(splines)
gam1 <- lm(
wage ~ ns(year, df = 4) + ns(age, df = 4) + maritl + race + education + jobclass + health + health_ins,
date = train
)
gam1 <- lm(
wage ~ ns(year, df = 4) + ns(age, df = 4) + maritl + race + education + jobclass + health + health_ins,
date = train
)
gam1 <- lm(
wage ~ ns(year, df = 4) + ns(age, df = 4) + maritl + race + education + jobclass + health + health_ins,
data = train
)
gam1 %>% summary()
library(rpart)
library(rpart.plot)
library(caret)
library(rpart)
library(rpart.plot)
library(caret)
tree1 <- rpart(wage~., data = train, method = "anova")
tree1 %>% summary()
rpart.plot(tree1)
tree1 <- rpart(wage~., data = train, method = "anova")
tree1 %>% summary()
rpart.plot(tree1)
plotcp(tree1)
plotcp(tree1)
plotcp(tree1)
opt <- tree1$cptable[which.min(tree1$cptable[,"xerror"]), "CP"]
tree2 <- prune(tree1, cp=opt)
rpart.plot(tree2)
wage
wage %>% select(education)
wage %>% select(education) %>% as_tibble()
wage %>% select(education) %>% as_tibble() %>% unique()
wage %>%
select(education) %>%
as_tibble() %>%
unique()
?wage
??wage
pred3 <- predict(tree2, newdata = test)
mse(test$wage, pred3)
library(tidyverse)
library(caret)
set.seed(1705)
vert <- read.csv("https://www.uio.no/studier/emner/matnat/math/STK2100/v25/oblig/vertebral-column.csv",
header = TRUE) %>% as_tibble()
ind <- createDataPartition(vert$class, p = 2/3, list = FALSE)
train <- vert[ind, ]
test <- vert[-ind, ]
train
test
logit1 <- glm(class ~ ., data = train, family = "binomial")
logit1 <- glm(class ~ ., data = train, family = "binomial")
summary(logit1)
cls
logit1 <- glm(class ~ ., data = train, family = "binomial")
summary(logit1)
prob4 <- predict(logit1, newdata = test, type = "response")
pred4 <- ifelse(prob4 > 0.5, 1, 0)
error4 <- mean(error4 != test$class)
prob4 <- predict(logit1, newdata = test, type = "response")
pred4 <- ifelse(prob4 > 0.5, 1, 0)
error4 <- mean(pred4 != test$class)
error4
library(MASS)
lda1 <- lda(class ~ ., data = train)
pred5 <- predict(lda1, newdata = test)$class
error5 <- mean(pred5 != test$class)
error5
qda1 <- qda(class ~ ., data = train)
pred6 <- predict(qda1, newdata = test)$class
error6 <- mean(pred6 != test$class)
error6
library(nnet)
train_std <- train %>%
mutate(across(-class, scale))
test_std <- test %>%
mutate(across(-class, scale))
nn1 <- nnet(class ~ ., data = train_std, size = 5, decay = 0.01, maxit = 1000, trace = FALSE)
pred7 <- predict(nn1, newdata = test_std, type = "class")
error7 <- mean(pred7 != test$class)
error7
library(nnet)
train_std <- train %>%
mutate(across(-class, scale))
test_std <- test %>%
mutate(across(-class, scale))
nn1 <- nnet(class ~ ., data = train_std, size = 5, decay = 0.01, maxit = 1000, trace = FALSE)
pred7 <- predict(nn1, newdata = test_std, type = "class")
error7 <- mean(pred7 != test$class)
error7
library(nnet)
train_std <- train %>%
mutate(across(-class, scale),
class = as.factor(class))
test_std <- test %>%
mutate(across(-class, scale),
class = as.factor(class))
nn1 <- nnet(class ~ ., data = train_std, size = 5, decay = 0.01, maxit = 1000, trace = FALSE)
pred7 <- predict(nn1, newdata = test_std, type = "class")
error7 <- mean(pred7 != test_std$class)
error7
setwd("C:/Users/ofurn/Dokumenter/Github/buypolarcapital/src/buypolarcapital/assets/industry/healthcare/R")
setwd("C:/Users/ofurn/Dokumenter/Github/buypolarcapital/src/buypolarcapital/assets/industry/overall/R")
setwd("C:/Users/ofurn/Dokumenter/Github/buypolarcapital/src/buypolarcapital/assets/industry/overall/R")
library(tidyverse)
library(tidyquant)
# Define tickers for all 11 S&P 500 sector indices
tickers <- c(
"^SP500-10",  # Energy
"^SP500-15",  # Materials
"^SP500-20",  # Industrials
"^SP500-25",  # Consumer Discretionary
"^SP500-30",  # Consumer Staples
"^SP500-35",  # Health Care
"^SP500-40",  # Financials
"^SP500-45",  # Information Technology
"^SP500-50",  # Communication Services
"^SP500-55",  # Utilities
"^SP500-60"   # Real Estate
)
# Set date range
start_date <- "2000-01-01"
end_date <- Sys.Date()
# Fetch data
sector_data <- tq_get(tickers,
from = start_date,
to = end_date,
get = "stock.prices")
# Normalize to 100 at start_date
sector_normalized <- sector_data %>%
group_by(symbol) %>%
mutate(normalized = 100 * adjusted / first(adjusted)) %>%
ungroup()
# Create plot and save as PDF
pdf(file = "plots/sp500_sectors.pdf",
width = 12,
height = 8)
sector_normalized %>%
select(symbol, date, normalized) %>%
pivot_longer(cols = normalized, names_to = "metric", values_to = "value") %>%
mutate(symbol = case_when(
symbol == "^SP500-10" ~ "Energy",
symbol == "^SP500-15" ~ "Materials",
symbol == "^SP500-20" ~ "Industrials",
symbol == "^SP500-25" ~ "Consumer Discretionary",
symbol == "^SP500-30" ~ "Consumer Staples",
symbol == "^SP500-35" ~ "Health Care",
symbol == "^SP500-40" ~ "Financials",
symbol == "^SP500-45" ~ "Information Technology",
symbol == "^SP500-50" ~ "Communication Services",
symbol == "^SP500-55" ~ "Utilities",
symbol == "^SP500-60" ~ "Real Estate"
)) %>%
ggplot(aes(x = date, y = value, colour = symbol)) +
geom_line() +
labs(
title = "S&P 500 Sector Indices (Normalized, 2000=100)",
x = "Date",
y = "Index Value (Normalized to 100)",
colour = "Sector"
) +
theme_bw() +
scale_y_continuous(labels = scales::comma) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
plot.title = element_text(hjust = 0.5)
) +
guides(colour = guide_legend(nrow = 2))
dev.off()
setwd("C:/Users/ofurn/Dokumenter/Github/buypolarcapital/src/buypolarcapital/assets/industry/overall/R")
library(tidyverse)
library(tidyquant)
# Define tickers for selected industry/sub-industry indices
tickers <- c(
"^SP500-401010",      # Banks (Financials)
"^SP500-352020",      # Biotechnology (Health Care)
"^SP500-45301020",    # Semiconductors (Information Technology)
"^SP500-201010",      # Aerospace & Defense (Industrials)
"^SP500-25502020"     # Internet & Direct Marketing Retail (Consumer Discretionary)
)
# Set date range
start_date <- "2000-01-01"
end_date <- Sys.Date()
# Fetch data
industry_data <- tq_get(tickers,
from = start_date,
to = end_date,
get = "stock.prices")
# Normalize to 100 at start_date
industry_normalized <- industry_data %>%
group_by(symbol) %>%
mutate(normalized = 100 * adjusted / first(adjusted)) %>%
ungroup()
# Create plot and save as PDF
pdf(file = "plots/sp500_industries.pdf",
width = 12,
height = 8)
industry_normalized %>%
select(symbol, date, normalized) %>%
pivot_longer(cols = normalized, names_to = "metric", values_to = "value") %>%
mutate(symbol = case_when(
symbol == "^SP500-401010" ~ "Banks",
symbol == "^SP500-352020" ~ "Biotechnology",
symbol == "^SP500-45301020" ~ "Semiconductors",
symbol == "^SP500-201010" ~ "Aerospace & Defense",
symbol == "^SP500-25502020" ~ "Internet & Direct Marketing Retail"
)) %>%
ggplot(aes(x = date, y = value, colour = symbol)) +
geom_line() +
labs(
title = "S&P 500 Industry Indices (Normalized, 2000=100)",
x = "Date",
y = "Index Value (Normalized to 100)",
colour = "Industry"
) +
theme_bw() +
scale_y_continuous(labels = scales::comma) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
plot.title = element_text(hjust = 0.5)
) +
guides(colour = guide_legend(nrow = 1))
dev.off()
library(tidyverse)
library(tidyverse)
library(tidyquant)
# Create plots directory if it doesn't exist
dir.create("plots", showWarnings = FALSE)
# Define tickers for S&P 500 and all 11 sector indices
tickers <- c(
"^GSPC",      # S&P 500
"^SP500-10",  # Energy
"^SP500-15",  # Materials
"^SP500-20",  # Industrials
"^SP500-25",  # Consumer Discretionary
"^SP500-30",  # Consumer Staples
"^SP500-35",  # Health Care
"^SP500-40",  # Financials
"^SP500-45",  # Information Technology
"^SP500-50",  # Communication Services
"^SP500-55",  # Utilities
"^SP500-60"   # Real Estate
)
# Set date range (start at 2010 to avoid data gaps)
start_date <- "2010-01-01"
end_date <- Sys.Date()
# Fetch data with error handling
sector_data <- map_dfr(tickers, function(ticker) {
tryCatch({
tq_get(ticker, from = start_date, to = end_date, get = "stock.prices") %>%
mutate(symbol = ticker)
}, error = function(e) {
message("Failed to fetch data for ticker: ", ticker)
return(NULL)
})
})
# Save raw data for debugging
write_csv(sector_data, "plots/sector_data_raw.csv")
# Check for missing tickers
fetched_tickers <- unique(sector_data$symbol)
missing_tickers <- setdiff(tickers, fetched_tickers)
if (length(missing_tickers) > 0) {
message("Missing data for tickers: ", paste(missing_tickers, collapse = ", "))
}
# Normalize to 100 at start_date
sector_normalized <- sector_data %>%
group_by(symbol) %>%
filter(!is.na(adjusted)) %>%
mutate(normalized = 100 * adjusted / first(adjusted)) %>%
ungroup()
# Create plot and save as PDF
pdf(file = "plots/sp500_sectors.pdf",
width = 12,
height = 8)
sector_normalized %>%
select(symbol, date, normalized) %>%
pivot_longer(cols = normalized, names_to = "metric", values_to = "value") %>%
mutate(symbol = case_when(
symbol == "^GSPC" ~ "S&P 500",
symbol == "^SP500-10" ~ "Energy",
symbol == "^SP500-15" ~ "Materials",
symbol == "^SP500-20" ~ "Industrials",
symbol == "^SP500-25" ~ "Consumer Discretionary",
symbol == "^SP500-30" ~ "Consumer Staples",
symbol == "^SP500-35" ~ "Health Care",
symbol == "^SP500-40" ~ "Financials",
symbol == "^SP500-45" ~ "Information Technology",
symbol == "^SP500-50" ~ "Communication Services",
symbol == "^SP500-55" ~ "Utilities",
symbol == "^SP500-60" ~ "Real Estate"
)) %>%
ggplot(aes(x = date, y = value, colour = symbol)) +
geom_line() +
labs(
title = "S&P 500 and Sector Indices (Normalized, 2010=100)",
x = "Date Surveyed",
y = "Index Value (Normalized to 100)",
colour = "Index"
) +
theme_bw() +
scale_y_continuous(labels = scales::comma) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
plot.title = element_text(hjust = 0.5)
) +
guides(colour = guide_legend(nrow = 2))
dev.off()
