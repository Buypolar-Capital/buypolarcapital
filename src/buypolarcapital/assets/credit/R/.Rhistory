setwd("C:/Users/ofurn/Dokumenter/Github/buypolarcapital/credit/R")
# credit/credit_rates.R
# Load packages
library(tidyverse)
library(tidyquant)
library(lubridate)
# Source the BuyPolar Capital plotting function
source("src/plotting/plotting.R")
# credit/R/credit_rates.R
# Load packages
library(tidyverse)
library(tidyquant)
library(lubridate)
# Source plotting function from src/
source("../../src/plotting/plotting.R")  # <-- Adjusted for current wd
# Set up folders (relative to buypolarcapital/)
dir.create("../data", recursive = TRUE, showWarnings = FALSE)
dir.create("../plots", recursive = TRUE, showWarnings = FALSE)
# Define FRED credit series
credit_series <- c(
"BAMLCC0A0CMTRIV"    = "US_Corp_Avg",
"BAMLC0A1CAAAEY"     = "AAA_Yield",
"BAMLC0A2CA1EY"      = "A_Yield",
"BAMLC0A3CAEY"       = "BBB_Yield",
"BAMLHYH0A0HYM2TRIV" = "High_Yield"
)
# Download data
credit_data <- tq_get(names(credit_series), get = "economic.data") %>%
mutate(ticker = credit_series[symbol]) %>%
rename(price = price) %>%
filter(!is.na(price)) %>%
select(date, price, ticker)
# Save data
write_csv(credit_data, "../data/credit_rates_raw.csv")
# Filter data for plotting
filtered_data <- credit_data %>% filter(date >= as.Date("2015-01-01"))
# Plot using BuyPolar style
plot_prices(
df = filtered_data,
title = "BuyPolar Credit Market Dashboard",
y_label = "Yield (%)",
source = "FRED / ICE BofA",
save_pdf = TRUE,
filename = "../plots/credit_rates_buypolar.pdf"
)
# credit/R/credit_report.R
library(tidyverse)
library(tidyquant)
library(lubridate)
library(gridExtra)
library(patchwork)  # For multipage PDF
library(zoo)
# Load custom BuyPolar plot style
source("../../src/plotting/plotting.R")
# Create folders
dir.create("../data", recursive = TRUE, showWarnings = FALSE)
dir.create("../plots", recursive = TRUE, showWarnings = FALSE)
# Define series
credit_series <- c(
"BAMLC0A1CAAAEY" = "AAA",
"BAMLC0A2CA1EY"  = "A",
"BAMLC0A3CAEY"   = "BBB",
"BAMLHYH0A0HYM2TRIV" = "High_Yield"
)
# Download
credit_data <- tq_get(names(credit_series), get = "economic.data") %>%
mutate(ticker = credit_series[symbol]) %>%
rename(yield = price) %>%
select(date, ticker, yield) %>%
filter(!is.na(yield))
write_csv(credit_data, "../data/credit_extended.csv")
# Reshape for easier calc
credit_wide <- credit_data %>%
pivot_wider(names_from = ticker, values_from = yield) %>%
arrange(date)
# Add spread: BBB - AAA
credit_wide <- credit_wide %>%
mutate(spread_BBB_AAA = BBB - AAA)
# Rolling volatility
vol_data <- credit_wide %>%
mutate(across(c(AAA, BBB, A, High_Yield), ~ rollapply(.x, width = 60, FUN = sd, fill = NA, align = "right"))) %>%
pivot_longer(cols = c(AAA, BBB, A, High_Yield), names_to = "ticker", values_to = "volatility") %>%
filter(!is.na(volatility))
# credit/R/credit_report.R
library(tidyverse)
library(tidyquant)
library(lubridate)
library(gridExtra)
library(patchwork)  # For multipage PDF
library(zoo)
# Load custom BuyPolar plot style
source("../../src/plotting/plotting.R")
# Create folders
dir.create("../data", recursive = TRUE, showWarnings = FALSE)
dir.create("../plots", recursive = TRUE, showWarnings = FALSE)
# Define series
credit_series <- c(
"BAMLC0A1CAAAEY" = "AAA",
"BAMLC0A2CA1EY"  = "A",
"BAMLC0A3CAEY"   = "BBB",
"BAMLHYH0A0HYM2TRIV" = "High_Yield"
)
# Download
credit_data <- tq_get(names(credit_series), get = "economic.data") %>%
mutate(ticker = credit_series[symbol]) %>%
rename(yield = price) %>%
select(date, ticker, yield) %>%
filter(!is.na(yield))
write_csv(credit_data, "../data/credit_extended.csv")
# Reshape for easier calc
credit_wide <- credit_data %>%
pivot_wider(names_from = ticker, values_from = yield) %>%
arrange(date)
# Add spread: BBB - AAA
credit_wide <- credit_wide %>%
mutate(spread_BBB_AAA = BBB - AAA)
# Rolling volatility
vol_data <- credit_wide %>%
mutate(across(c(AAA, BBB, A, High_Yield), ~ rollapply(.x, width = 60, FUN = sd, fill = NA, align = "right"))) %>%
pivot_longer(cols = c(AAA, BBB, A, High_Yield), names_to = "ticker", values_to = "volatility") %>%
filter(!is.na(volatility))
# credit/R/credit_report.R
library(tidyverse)
library(tidyquant)
library(lubridate)
library(gridExtra)
library(patchwork)  # For multipage PDF
library(zoo)
# Load custom BuyPolar plot style
source("../../src/plotting/plotting.R")
# Create folders
dir.create("../data", recursive = TRUE, showWarnings = FALSE)
dir.create("../plots", recursive = TRUE, showWarnings = FALSE)
# Define series
credit_series <- c(
"BAMLC0A1CAAAEY" = "AAA",
# "BAMLC0A2CA1EY"  = "A",
"BAMLC0A3CAEY"   = "BBB",
"BAMLHYH0A0HYM2TRIV" = "High_Yield"
)
# Download
credit_data <- tq_get(names(credit_series), get = "economic.data") %>%
mutate(ticker = credit_series[symbol]) %>%
rename(yield = price) %>%
select(date, ticker, yield) %>%
filter(!is.na(yield))
write_csv(credit_data, "../data/credit_extended.csv")
# Reshape for easier calc
credit_wide <- credit_data %>%
pivot_wider(names_from = ticker, values_from = yield) %>%
arrange(date)
# Add spread: BBB - AAA
credit_wide <- credit_wide %>%
mutate(spread_BBB_AAA = BBB - AAA)
# Rolling volatility
vol_data <- credit_wide %>%
mutate(across(c(AAA, BBB, A, High_Yield), ~ rollapply(.x, width = 60, FUN = sd, fill = NA, align = "right"))) %>%
pivot_longer(cols = c(AAA, BBB, A, High_Yield), names_to = "ticker", values_to = "volatility") %>%
filter(!is.na(volatility))
# credit/R/credit_report.R
library(tidyverse)
library(tidyquant)
library(lubridate)
library(gridExtra)
library(patchwork)
library(zoo)
# Load BuyPolar Capital plotting style
source("../../src/plotting/plotting.R")
# Setup folders
dir.create("../data", recursive = TRUE, showWarnings = FALSE)
dir.create("../plots", recursive = TRUE, showWarnings = FALSE)
# Define credit yield tickers
credit_series <- c(
"BAMLC0A1CAAAEY"     = "AAA",
"BAMLC0A3CAEY"       = "BBB",
"BAMLHYH0A0HYM2TRIV" = "High_Yield"
)
# Download available series from FRED
credit_data <- tq_get(names(credit_series), get = "economic.data") %>%
mutate(ticker = credit_series[symbol]) %>%
rename(yield = price) %>%
select(date, ticker, yield) %>%
filter(!is.na(yield))
# Save data
write_csv(credit_data, "../data/credit_extended.csv")
# Wide format for calculations
credit_wide <- credit_data %>%
pivot_wider(names_from = ticker, values_from = yield) %>%
arrange(date)
# Check available tickers
available_yields <- intersect(names(credit_series), colnames(credit_wide))
# Plot 1: Raw yields over time
p1 <- ggplot(credit_data, aes(x = date, y = yield, color = ticker)) +
geom_line() +
labs(title = "Credit Yields Over Time", y = "Yield (%)") +
theme_buypolar()
# Plot 2: BBB - AAA Spread (if both available)
p2 <- NULL
if (all(c("BBB", "AAA") %in% colnames(credit_wide))) {
credit_wide <- credit_wide %>%
mutate(spread_BBB_AAA = BBB - AAA)
p2 <- ggplot(credit_wide, aes(x = date, y = spread_BBB_AAA)) +
geom_line(color = "#b30000") +
labs(title = "BBB - AAA Yield Spread", y = "Spread (%)") +
theme_buypolar()
}
# Plot 3: Rolling 60-day volatility (on yield)
vol_data <- credit_wide %>%
mutate(across(all_of(available_yields), ~ rollapply(.x, 60, sd, fill = NA, align = "right"))) %>%
pivot_longer(cols = all_of(available_yields), names_to = "ticker", values_to = "volatility") %>%
filter(!is.na(volatility))
# credit/R/credit_report.R
library(tidyverse)
library(tidyquant)
library(lubridate)
library(gridExtra)
library(patchwork)
library(zoo)
# Load BuyPolar Capital plotting style
source("../../src/plotting/plotting.R")
# Setup folders
dir.create("../data", recursive = TRUE, showWarnings = FALSE)
dir.create("../plots", recursive = TRUE, showWarnings = FALSE)
# Define credit yield tickers
credit_series <- c(
"BAMLC0A1CAAAEY"     = "AAA",
"BAMLC0A3CAEY"       = "BBB",
"BAMLHYH0A0HYM2TRIV" = "High_Yield"
)
# Download available series from FRED
credit_data <- tq_get(names(credit_series), get = "economic.data") %>%
mutate(ticker = credit_series[symbol]) %>%
rename(yield = price) %>%
select(date, ticker, yield) %>%
filter(!is.na(yield))
# Save data
write_csv(credit_data, "../data/credit_extended.csv")
# Wide format for calculations
credit_wide <- credit_data %>%
pivot_wider(names_from = ticker, values_from = yield) %>%
arrange(date)
# Check available tickers
available_yields <- intersect(names(credit_series), colnames(credit_wide))
# Plot 1: Raw yields over time
p1 <- ggplot(credit_data, aes(x = date, y = yield, color = ticker)) +
geom_line() +
labs(title = "Credit Yields Over Time", y = "Yield (%)") +
theme_buypolar()
# Plot 2: BBB - AAA Spread (if both available)
p2 <- NULL
if (all(c("BBB", "AAA") %in% colnames(credit_wide))) {
credit_wide <- credit_wide %>%
mutate(spread_BBB_AAA = BBB - AAA)
p2 <- ggplot(credit_wide, aes(x = date, y = spread_BBB_AAA)) +
geom_line(color = "#b30000") +
labs(title = "BBB - AAA Yield Spread", y = "Spread (%)") +
theme_buypolar()
}
# Plot 3: Rolling 60-day volatility (on yield)
volatility_cols <- paste0(available_yields, "_vol")
vol_data <- credit_wide %>%
mutate(across(all_of(available_yields), ~ rollapply(.x, 60, sd, fill = NA, align = "right"), .names = "{.col}_vol")) %>%
select(date, all_of(volatility_cols)) %>%
pivot_longer(cols = -date, names_to = "ticker", values_to = "volatility") %>%
mutate(ticker = str_remove(ticker, "_vol")) %>%
filter(!is.na(volatility))
# credit/R/credit_report.R
library(tidyverse)
library(tidyquant)
library(lubridate)
library(gridExtra)
library(patchwork)
library(zoo)
# Load BuyPolar Capital plotting style
source("../../src/plotting/plotting.R")
# Setup folders
dir.create("../data", recursive = TRUE, showWarnings = FALSE)
dir.create("../plots", recursive = TRUE, showWarnings = FALSE)
# Define credit yield tickers
credit_series <- c(
"BAMLC0A1CAAAEY"     = "AAA",
"BAMLC0A3CAEY"       = "BBB",
"BAMLHYH0A0HYM2TRIV" = "High_Yield"
)
# Download available series from FRED
credit_data <- tq_get(names(credit_series), get = "economic.data") %>%
mutate(ticker = credit_series[symbol]) %>%
rename(yield = price) %>%
select(date, ticker, yield) %>%
filter(!is.na(yield))
# Save data
write_csv(credit_data, "../data/credit_extended.csv")
# Wide format for calculations
credit_wide <- credit_data %>%
pivot_wider(names_from = ticker, values_from = yield) %>%
arrange(date)
# Check available tickers
available_yields <- intersect(names(credit_series), colnames(credit_wide))
# Plot 1: Raw yields over time
p1 <- ggplot(credit_data, aes(x = date, y = yield, color = ticker)) +
geom_line() +
labs(title = "Credit Yields Over Time", y = "Yield (%)") +
theme_buypolar()
# Plot 2: BBB - AAA Spread (if both available)
p2 <- NULL
if (all(c("BBB", "AAA") %in% colnames(credit_wide))) {
credit_wide <- credit_wide %>%
mutate(spread_BBB_AAA = BBB - AAA)
p2 <- ggplot(credit_wide, aes(x = date, y = spread_BBB_AAA)) +
geom_line(color = "#b30000") +
labs(title = "BBB - AAA Yield Spread", y = "Spread (%)") +
theme_buypolar()
}
# Recalculate truly available tickers based on existing columns
available_yields <- intersect(credit_series, colnames(credit_wide)) |> unname()
# Only continue if we have valid tickers
if (length(available_yields) > 0) {
# Construct volatility column names
volatility_cols <- paste0(available_yields, "_vol")
# Apply rolling volatility calculation
vol_data <- credit_wide %>%
mutate(across(all_of(available_yields),
~ rollapply(.x, width = 60, FUN = sd, fill = NA, align = "right"),
.names = "{.col}_vol")) %>%
select(date, all_of(volatility_cols)) %>%
pivot_longer(cols = all_of(volatility_cols), names_to = "ticker", values_to = "volatility") %>%
mutate(ticker = str_remove(ticker, "_vol")) %>%
filter(!is.na(volatility))
# Plot 3: Volatility chart
p3 <- ggplot(vol_data, aes(x = date, y = volatility, color = ticker)) +
geom_line() +
labs(title = "Rolling 60-Day Yield Volatility", y = "Volatility (SD)") +
theme_buypolar()
} else {
warning("No valid yield columns available for volatility calculation.")
p3 <- NULL
}
# Plot 4: Cumulative Return
if (length(available_yields) > 0) {
returns_data <- credit_wide %>%
mutate(across(all_of(available_yields), ~ c(NA, diff(.x)))) %>%
pivot_longer(cols = all_of(available_yields), names_to = "ticker", values_to = "daily_return") %>%
filter(!is.na(daily_return)) %>%
group_by(ticker) %>%
mutate(cumulative_return = cumsum(daily_return)) %>%
ungroup()
p4 <- ggplot(returns_data, aes(x = date, y = cumulative_return, color = ticker)) +
geom_line() +
labs(title = "Cumulative Return (Based on Δ Yield)", y = "Cumulative Change") +
theme_buypolar()
} else {
warning("No valid yield columns available for return calculation.")
p4 <- NULL
}
# Save to multi-page PDF
pdf("../plots/credit_multipage_report.pdf", width = 10, height = 6)
print(p1)
if (!is.null(p2)) print(p2)
if (!is.null(p3)) print(p3)
if (!is.null(p4)) print(p4)
dev.off()
cat("✅ Multi-page credit report saved to: credit/plots/credit_multipage_report.pdf\n")
# credit/R/credit_report.R
library(tidyverse)
library(tidyquant)
library(lubridate)
library(gridExtra)
library(patchwork)
library(zoo)
# Load BuyPolar Capital plotting style
source("../../src/plotting/plotting.R")
# Setup folders
dir.create("../data", recursive = TRUE, showWarnings = FALSE)
dir.create("../plots", recursive = TRUE, showWarnings = FALSE)
# Define credit yield tickers
credit_series <- c(
"BAMLC0A1CAAAEY"     = "AAA",
"BAMLC0A3CAEY"       = "BBB",
"BAMLHYH0A0HYM2TRIV" = "High_Yield"
)
# Download available series from FRED
credit_data <- tq_get(names(credit_series), get = "economic.data") %>%
mutate(ticker = credit_series[symbol]) %>%
rename(yield = price) %>%
select(date, ticker, yield) %>%
filter(!is.na(yield))
# Save data
write_csv(credit_data, "../data/credit_extended.csv")
# Wide format for calculations
credit_wide <- credit_data %>%
pivot_wider(names_from = ticker, values_from = yield) %>%
arrange(date)
# Check available tickers
available_yields <- intersect(names(credit_series), colnames(credit_wide))
# Plot 1: Raw yields over time
p1 <- ggplot(credit_data, aes(x = date, y = yield, color = ticker)) +
geom_line() +
labs(title = "Credit Yields Over Time", y = "Yield (%)") +
theme_buypolar()
# Plot 2: BBB - AAA Spread (if both available)
p2 <- NULL
if (all(c("BBB", "AAA") %in% colnames(credit_wide))) {
credit_wide <- credit_wide %>%
mutate(spread_BBB_AAA = BBB - AAA)
p2 <- ggplot(credit_wide, aes(x = date, y = spread_BBB_AAA)) +
geom_line(color = "#b30000") +
labs(title = "BBB - AAA Yield Spread", y = "Spread (%)") +
theme_buypolar()
}
# Recalculate truly available tickers based on existing columns
available_yields <- intersect(credit_series, colnames(credit_wide)) |> unname()
# Only continue if we have valid tickers
if (length(available_yields) > 0) {
# Construct volatility column names
volatility_cols <- paste0(available_yields, "_vol")
# Apply rolling volatility calculation
vol_data <- credit_wide %>%
mutate(across(all_of(available_yields),
~ rollapply(.x, width = 60, FUN = sd, fill = NA, align = "right"),
.names = "{.col}_vol")) %>%
select(date, all_of(volatility_cols)) %>%
pivot_longer(cols = all_of(volatility_cols), names_to = "ticker", values_to = "volatility") %>%
mutate(ticker = str_remove(ticker, "_vol")) %>%
filter(!is.na(volatility))
# Plot 3: Volatility chart
p3 <- ggplot(vol_data, aes(x = date, y = volatility, color = ticker)) +
geom_line() +
labs(title = "Rolling 60-Day Yield Volatility", y = "Volatility (SD)") +
theme_buypolar()
} else {
warning("No valid yield columns available for volatility calculation.")
p3 <- NULL
}
# Plot 4: Cumulative Return
if (length(available_yields) > 0) {
returns_data <- credit_wide %>%
mutate(across(all_of(available_yields), ~ c(NA, diff(.x)))) %>%
pivot_longer(cols = all_of(available_yields), names_to = "ticker", values_to = "daily_return") %>%
filter(!is.na(daily_return)) %>%
group_by(ticker) %>%
mutate(cumulative_return = cumsum(daily_return)) %>%
ungroup()
p4 <- ggplot(returns_data, aes(x = date, y = cumulative_return, color = ticker)) +
geom_line() +
labs(title = "Cumulative Return (Based on Δ Yield)", y = "Cumulative Change") +
theme_buypolar()
} else {
warning("No valid yield columns available for return calculation.")
p4 <- NULL
}
# Save to multi-page PDF
pdf("plots/credit_multipage_report.pdf", width = 10, height = 6)
print(p1)
if (!is.null(p2)) print(p2)
if (!is.null(p3)) print(p3)
if (!is.null(p4)) print(p4)
dev.off()
cat("✅ Multi-page credit report saved to: credit/plots/credit_multipage_report.pdf\n")
