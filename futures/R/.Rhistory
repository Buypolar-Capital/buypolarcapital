geom_line(alpha = 0.7) +
scale_y_continuous(labels = percent_format(accuracy = 0.1)) +
labs(title = "Daily Returns of Futures",
y = "Daily Return", x = "Date", color = "Contract") +
theme_minimal()
# --- Plot 3: 30-day Rolling Volatility ---
plot3 <- ggplot(futures_volatility, aes(x = date, y = rolling_vol, color = symbol)) +
geom_line(size = 1) +
scale_y_continuous(labels = percent_format(accuracy = 0.1)) +
labs(title = "30-Day Rolling Volatility of Futures",
y = "Volatility (Std Dev of Daily Returns)", x = "Date", color = "Contract") +
theme_minimal()
print(plot1)
print(plot2)
print(plot3)
dev.off()
message("✅ PDF with all plots saved to /plots/futures_analysis.pdf")
# === PART 2: fpp3-style Time Series Analysis (New Approach) ===
# Re-download futures data with longer horizon for modeling
futures_tickers <- c("ES=F", "CL=F")
futures_data <- tq_get(futures_tickers,
from = Sys.Date() - 365 * 2,
to = Sys.Date(),
get = "stock.prices")
# Convert to tsibble and fill gaps
futures_ts <- futures_data %>%
select(date, symbol, close) %>%
filter(!is.na(close)) %>%
as_tsibble(index = date, key = symbol, regular = FALSE) %>%
group_by_key() %>%
fill_gaps(.full = TRUE) %>%
ungroup()
# Unique contracts
symbols <- unique(futures_ts$symbol)
# Loop through symbols to generate 5 fpp3-style PDF reports
for (sym in symbols) {
data_sym <- futures_ts %>%
filter(symbol == sym) %>%
filter(!is.na(close))  # Ensure no NA for modeling
# 1. AUTOCORRELATION PLOT (ACF)
pdf(paste0("plots/", sym, "_acf.pdf"), width = 10, height = 6)
p1 <- data_sym %>%
ACF(close, lag_max = 30) %>%
autoplot() +
labs(title = paste("Autocorrelation Function (ACF) for", sym))
print(p1)
dev.off()
# 2. STL DECOMPOSITION (Simplified for daily data)
pdf(paste0("plots/", sym, "_decomposition.pdf"), width = 10, height = 6)
if (nrow(data_sym) > 31) {
data_decomp <- data_sym %>%
model(STL(close ~ trend(window = 21) + season(window = 7))) %>%
components()
print(autoplot(data_decomp) +
labs(title = paste("STL Decomposition for", sym)))
} else {
print(ggplot() +
annotate("text", x = 0, y = 0, label = paste("Not enough data for STL", sym)) +
theme_void())
}
dev.off()
# 3. FEATURE SUMMARY TABLE
pdf(paste0("plots/", sym, "_features.pdf"), width = 10, height = 6)
features_tbl <- data_sym %>%
features(close, list(
mean = mean,
sd = sd,
trend_strength = function(x) feast::max_trend(x, order = 1),
spike = function(x) feast::spikiness(x),
acf1 = function(x) ACF(x, lag_max = 1)$acf[2]
))
grid::grid.newpage()
gridExtra::grid.table(features_tbl)
dev.off()
# 4. ETS FORECAST
pdf(paste0("plots/", sym, "_forecast.pdf"), width = 10, height = 6)
train <- data_sym %>% filter(date < max(date) - 30)
if (nrow(train) > 50) {  # Lower threshold for ETS
fit <- train %>% model(ETS(close))
fc <- fit %>% forecast(h = 60)
print(autoplot(fc, data_sym) +
labs(title = paste("ETS Forecast for", sym),
subtitle = "Forecast Horizon: 60 days",
y = "Price", x = "Date") +
theme_minimal())
} else {
print(ggplot() +
annotate("text", x = 0, y = 0, label = paste("Not enough data for forecast", sym)) +
theme_void())
}
dev.off()
# 5. RESIDUAL DIAGNOSTICS
pdf(paste0("plots/", sym, "_residuals.pdf"), width = 10, height = 6)
if (nrow(train) > 50) {
residuals_plot <- fit %>%
gg_tsresiduals() +
labs(title = paste("Residual Diagnostics for ETS Model -", sym))
print(residuals_plot)
} else {
print(ggplot() +
annotate("text", x = 0, y = 0, label = paste("Not enough data for residuals", sym)) +
theme_void())
}
dev.off()
}
library(tidyquant)
library(tidyverse)
library(fpp3)
library(scales)
library(zoo)
library(gridExtra)
# Create directory if it doesn't exist
if (!dir.exists("plots")) dir.create("plots")
# === PART 1: Time Series Summary Plots (ggplot2) ===
# Futures tickers from Yahoo Finance
futures_tickers <- c(
"ES=F",   # S&P 500 E-mini
"NQ=F",   # Nasdaq
"CL=F",   # Crude Oil
"GC=F",   # Gold
"BTC-USD" # Bitcoin (spot, for flavor)
)
# Download data
futures_data <- tq_get(futures_tickers,
from = Sys.Date() - 365,
to = Sys.Date(),
get = "stock.prices")
# Normalize prices to 1 at the starting point
futures_normalized <- futures_data %>%
group_by(symbol) %>%
arrange(date) %>%
mutate(normalized = close / first(close)) %>%
ungroup()
# Calculate daily returns
futures_returns <- futures_data %>%
group_by(symbol) %>%
arrange(date) %>%
mutate(daily_return = (close / lag(close)) - 1) %>%
ungroup()
# Calculate 30-day rolling volatility (std dev of daily returns)
futures_volatility <- futures_returns %>%
group_by(symbol) %>%
arrange(date) %>%
mutate(rolling_vol = rollapply(daily_return, width = 30, FUN = sd, fill = NA, align = "right")) %>%
ungroup()
# Create PDF with all summary plots
pdf("plots/futures_analysis.pdf", width = 10, height = 6)
# --- Plot 1: Normalized Prices ---
plot1 <- ggplot(futures_normalized, aes(x = date, y = normalized, color = symbol)) +
geom_line(size = 1) +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(title = "Normalized Prices of Futures (Base = 1)",
y = "Normalized Price", x = "Date", color = "Contract") +
theme_minimal()
# --- Plot 2: Daily Returns ---
plot2 <- ggplot(futures_returns, aes(x = date, y = daily_return, color = symbol)) +
geom_line(alpha = 0.7) +
scale_y_continuous(labels = percent_format(accuracy = 0.1)) +
labs(title = "Daily Returns of Futures",
y = "Daily Return", x = "Date", color = "Contract") +
theme_minimal()
# --- Plot 3: 30-day Rolling Volatility ---
plot3 <- ggplot(futures_volatility, aes(x = date, y = rolling_vol, color = symbol)) +
geom_line(size = 1) +
scale_y_continuous(labels = percent_format(accuracy = 0.1)) +
labs(title = "30-Day Rolling Volatility of Futures",
y = "Volatility (Std Dev of Daily Returns)", x = "Date", color = "Contract") +
theme_minimal()
print(plot1)
print(plot2)
print(plot3)
dev.off()
message("✅ PDF with all plots saved to /plots/futures_analysis.pdf")
# === PART 2: fpp3-style Time Series Analysis ===
# Re-download futures data with longer horizon for modeling
futures_tickers <- c("ES=F", "CL=F")
futures_data <- tq_get(futures_tickers,
from = Sys.Date() - 365 * 2,
to = Sys.Date(),
get = "stock.prices")
# Convert to tsibble, fill gaps, and interpolate NA values
futures_ts <- futures_data %>%
select(date, symbol, close) %>%
filter(!is.na(close)) %>%
as_tsibble(index = date, key = symbol, regular = FALSE) %>%
group_by_key() %>%
fill_gaps(.full = TRUE) %>%
mutate(close = na.approx(close, na.rm = FALSE)) %>%  # Linear interpolation for NA
ungroup() %>%
update_tsibble(regular = TRUE)  # Ensure regularity
# Unique contracts
symbols <- unique(futures_ts$symbol)
# Loop through symbols to generate 5 fpp3-style PDF reports
for (sym in symbols) {
data_sym <- futures_ts %>%
filter(symbol == sym) %>%
filter(!is.na(close))  # Double-check no NA remain
# 1. AUTOCORRELATION PLOT (ACF)
pdf(paste0("plots/", sym, "_acf.pdf"), width = 10, height = 6)
if (nrow(data_sym) > 10) {
p1 <- data_sym %>%
ACF(close, lag_max = 30) %>%
autoplot() +
labs(title = paste("Autocorrelation Function (ACF) for", sym))
print(p1)
} else {
print(ggplot() +
annotate("text", x = 0, y = 0, label = paste("Not enough data for ACF", sym)) +
theme_void())
}
dev.off()
# 2. STL DECOMPOSITION
pdf(paste0("plots/", sym, "_decomposition.pdf"), width = 10, height = 6)
if (nrow(data_sym) > 31) {
data_decomp <- data_sym %>%
model(STL(close ~ trend(window = 21) + season(window = 7))) %>%
components()
print(autoplot(data_decomp) +
labs(title = paste("STL Decomposition for", sym)))
} else {
print(ggplot() +
annotate("text", x = 0, y = 0, label = paste("Not enough data for STL", sym)) +
theme_void())
}
dev.off()
# 3. FEATURE SUMMARY TABLE
pdf(paste0("plots/", sym, "_features.pdf"), width = 10, height = 6)
if (nrow(data_sym) > 10) {
features_tbl <- data_sym %>%
features(close, list(
mean = mean,
sd = sd,
trend_strength = function(x) feast::max_trend(x, order = 1),
spike = function(x) feast::spikiness(x),
acf1 = function(x) ACF(x, lag_max = 1)$acf[2]
))
grid::grid.newpage()
gridExtra::grid.table(features_tbl)
} else {
grid::grid.newpage()
grid::grid.text(paste("Not enough data for features", sym))
}
dev.off()
# 4. ETS FORECAST
pdf(paste0("plots/", sym, "_forecast.pdf"), width = 10, height = 6)
train <- data_sym %>% filter(date < max(date) - 30)
if (nrow(train) > 30) {  # Lowered threshold
fit <- train %>% model(ETS(close))
fc <- fit %>% forecast(h = 60)
print(autoplot(fc, data_sym) +
labs(title = paste("ETS Forecast for", sym),
subtitle = "Forecast Horizon: 60 days",
y = "Price", x = "Date") +
theme_minimal())
} else {
print(ggplot() +
annotate("text", x = 0, y = 0, label = paste("Not enough data for forecast", sym)) +
theme_void())
}
dev.off()
# 5. RESIDUAL DIAGNOSTICS
pdf(paste0("plots/", sym, "_residuals.pdf"), width = 10, height = 6)
if (nrow(train) > 30 && !inherits(fit, "null_mdl")) {  # Check for valid model
residuals_plot <- fit %>%
gg_tsresiduals() +
labs(title = paste("Residual Diagnostics for ETS Model -", sym))
print(residuals_plot)
} else {
print(ggplot() +
annotate("text", x = 0, y = 0, label = paste("Not enough data or invalid model for residuals", sym)) +
theme_void())
}
dev.off()
}
library(tidyquant)
library(tidyverse)
library(fpp3)
library(scales)
library(zoo)
library(gridExtra)
# Create directory if it doesn't exist
if (!dir.exists("plots")) dir.create("plots")
# === PART 1: Time Series Summary Plots (ggplot2) ===
# Futures tickers from Yahoo Finance
futures_tickers <- c(
"ES=F",   # S&P 500 E-mini
"NQ=F",   # Nasdaq
"CL=F",   # Crude Oil
"GC=F",   # Gold
"BTC-USD" # Bitcoin (spot, for flavor)
)
# Download data
futures_data <- tq_get(futures_tickers,
from = Sys.Date() - 365,
to = Sys.Date(),
get = "stock.prices")
# Normalize prices to 1 at the starting point
futures_normalized <- futures_data %>%
group_by(symbol) %>%
arrange(date) %>%
mutate(normalized = close / first(close)) %>%
ungroup()
# Calculate daily returns
futures_returns <- futures_data %>%
group_by(symbol) %>%
arrange(date) %>%
mutate(daily_return = (close / lag(close)) - 1) %>%
ungroup()
# Calculate 30-day rolling volatility (std dev of daily returns)
futures_volatility <- futures_returns %>%
group_by(symbol) %>%
arrange(date) %>%
mutate(rolling_vol = rollapply(daily_return, width = 30, FUN = sd, fill = NA, align = "right")) %>%
ungroup()
# Create PDF with all summary plots
pdf("plots/futures_analysis.pdf", width = 10, height = 6)
# --- Plot 1: Normalized Prices ---
plot1 <- ggplot(futures_normalized, aes(x = date, y = normalized, color = symbol)) +
geom_line(size = 1) +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(title = "Normalized Prices of Futures (Base = 1)",
y = "Normalized Price", x = "Date", color = "Contract") +
theme_minimal()
# --- Plot 2: Daily Returns ---
plot2 <- ggplot(futures_returns, aes(x = date, y = daily_return, color = symbol)) +
geom_line(alpha = 0.7) +
scale_y_continuous(labels = percent_format(accuracy = 0.1)) +
labs(title = "Daily Returns of Futures",
y = "Daily Return", x = "Date", color = "Contract") +
theme_minimal()
# --- Plot 3: 30-day Rolling Volatility ---
plot3 <- ggplot(futures_volatility, aes(x = date, y = rolling_vol, color = symbol)) +
geom_line(size = 1) +
scale_y_continuous(labels = percent_format(accuracy = 0.1)) +
labs(title = "30-Day Rolling Volatility of Futures",
y = "Volatility (Std Dev of Daily Returns)", x = "Date", color = "Contract") +
theme_minimal()
print(plot1)
print(plot2)
print(plot3)
dev.off()
message("✅ PDF with all plots saved to /plots/futures_analysis.pdf")
# === PART 2: fpp3-style Time Series Analysis ===
# Re-download futures data with longer horizon for modeling
futures_tickers <- c("ES=F", "CL=F")
futures_data <- tq_get(futures_tickers,
from = Sys.Date() - 365 * 2,
to = Sys.Date(),
get = "stock.prices")
# Convert to tsibble, fill all dates, and interpolate
futures_ts <- futures_data %>%
select(date, symbol, close) %>%
as_tsibble(index = date, key = symbol, regular = FALSE) %>%
group_by_key() %>%
fill_gaps(.full = TRUE) %>%  # Fill all calendar days with NA
mutate(close = na.approx(close, na.rm = FALSE)) %>%  # Interpolate NA values
ungroup() %>%
filter(!is.na(close)) %>%  # Filter after interpolation
update_tsibble(regular = TRUE)  # Enforce regularity
# Unique contracts
symbols <- unique(futures_ts$symbol)
# Loop through symbols to generate 5 fpp3-style PDF reports
for (sym in symbols) {
data_sym <- futures_ts %>%
filter(symbol == sym)
# Debug: Check data
message(paste("Debug: Rows for", sym, ":", nrow(data_sym)))
# 1. AUTOCORRELATION PLOT (ACF)
pdf(paste0("plots/", sym, "_acf.pdf"), width = 10, height = 6)
if (nrow(data_sym) > 10) {
p1 <- data_sym %>%
ACF(close, lag_max = 30) %>%
autoplot() +
labs(title = paste("Autocorrelation Function (ACF) for", sym))
print(p1)
} else {
print(ggplot() +
annotate("text", x = 0, y = 0, label = paste("Not enough data for ACF", sym)) +
theme_void())
}
dev.off()
# 2. STL DECOMPOSITION
pdf(paste0("plots/", sym, "_decomposition.pdf"), width = 10, height = 6)
if (nrow(data_sym) > 31) {
data_decomp <- data_sym %>%
model(STL(close ~ trend(window = 21) + season(window = 7))) %>%
components()
print(autoplot(data_decomp) +
labs(title = paste("STL Decomposition for", sym)))
} else {
print(ggplot() +
annotate("text", x = 0, y = 0, label = paste("Not enough data for STL", sym)) +
theme_void())
}
dev.off()
# 3. FEATURE SUMMARY TABLE
pdf(paste0("plots/", sym, "_features.pdf"), width = 10, height = 6)
if (nrow(data_sym) > 10) {
features_tbl <- data_sym %>%
features(close, list(
mean = mean,
sd = sd,
trend_strength = function(x) feast::max_trend(x, order = 1),
spike = function(x) feast::spikiness(x),
acf1 = function(x) ACF(x, lag_max = 1)$acf[2]
))
grid::grid.newpage()
gridExtra::grid.table(features_tbl)
} else {
grid::grid.newpage()
grid::grid.text(paste("Not enough data for features", sym))
}
dev.off()
# 4. ETS FORECAST
pdf(paste0("plots/", sym, "_forecast.pdf"), width = 10, height = 6)
train <- data_sym %>% filter(date < max(date) - 30)
if (nrow(train) > 30) {
fit <- train %>% model(ETS(close))
fc <- fit %>% forecast(h = 60)
print(autoplot(fc, data_sym) +
labs(title = paste("ETS Forecast for", sym),
subtitle = "Forecast Horizon: 60 days",
y = "Price", x = "Date") +
theme_minimal())
} else {
print(ggplot() +
annotate("text", x = 0, y = 0, label = paste("Not enough data for forecast", sym)) +
theme_void())
}
dev.off()
# 5. RESIDUAL DIAGNOSTICS
pdf(paste0("plots/", sym, "_residuals.pdf"), width = 10, height = 6)
if (nrow(train) > 30 && !inherits(fit, "null_mdl")) {
residuals_plot <- fit %>%
gg_tsresiduals() +
labs(title = paste("Residual Diagnostics for ETS Model -", sym))
print(residuals_plot)
} else {
print(ggplot() +
annotate("text", x = 0, y = 0, label = paste("Not enough data or invalid model for residuals", sym)) +
theme_void())
}
dev.off()
}
library(tidyquant)
library(tidyverse)
library(fpp3)
library(scales)
library(zoo)
library(gridExtra)
# Create directory if it doesn't exist
if (!dir.exists("plots")) dir.create("plots")
# === PART 1: Time Series Summary Plots (ggplot2) ===
# Futures tickers from Yahoo Finance
futures_tickers <- c(
"ES=F",   # S&P 500 E-mini
"NQ=F",   # Nasdaq
"CL=F",   # Crude Oil
"GC=F",   # Gold
"BTC-USD" # Bitcoin (spot, for flavor)
)
# Download data
futures_data <- tq_get(futures_tickers,
from = Sys.Date() - 365,
to = Sys.Date(),
get = "stock.prices")
# Normalize prices to 1 at the starting point
futures_normalized <- futures_data %>%
group_by(symbol) %>%
arrange(date) %>%
mutate(normalized = close / first(close)) %>%
ungroup()
# Calculate daily returns
futures_returns <- futures_data %>%
group_by(symbol) %>%
arrange(date) %>%
mutate(daily_return = (close / lag(close)) - 1) %>%
ungroup()
# Calculate 30-day rolling volatility (std dev of daily returns)
futures_volatility <- futures_returns %>%
group_by(symbol) %>%
arrange(date) %>%
mutate(rolling_vol = rollapply(daily_return, width = 30, FUN = sd, fill = NA, align = "right")) %>%
ungroup()
# Create PDF with all summary plots
pdf("plots/futures_analysis.pdf", width = 10, height = 6)
# --- Plot 1: Normalized Prices ---
plot1 <- ggplot(futures_normalized, aes(x = date, y = normalized, color = symbol)) +
geom_line(size = 1) +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(title = "Normalized Prices of Futures (Base = 1)",
y = "Normalized Price", x = "Date", color = "Contract") +
theme_minimal()
# --- Plot 2: Daily Returns ---
plot2 <- ggplot(futures_returns, aes(x = date, y = daily_return, color = symbol)) +
geom_line(alpha = 0.7) +
scale_y_continuous(labels = percent_format(accuracy = 0.1)) +
labs(title = "Daily Returns of Futures",
y = "Daily Return", x = "Date", color = "Contract") +
theme_minimal()
# --- Plot 3: 30-day Rolling Volatility ---
plot3 <- ggplot(futures_volatility, aes(x = date, y = rolling_vol, color = symbol)) +
geom_line(size = 1) +
scale_y_continuous(labels = percent_format(accuracy = 0.1)) +
labs(title = "30-Day Rolling Volatility of Futures",
y = "Volatility (Std Dev of Daily Returns)", x = "Date", color = "Contract") +
theme_minimal()
print(plot1)
print(plot2)
print(plot3)
dev.off()
message("✅ PDF with all plots saved to /plots/futures_analysis.pdf")
